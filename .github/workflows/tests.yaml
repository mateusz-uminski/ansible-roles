name: tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  PYTHON_VERSION: 3.11
  ANSIBLE_VERSION: 8.6.0
  MOLECULE_VERSION: 6.0.2
  MOLECULE_PLUGIN_VERSION: 23.5.0
  PYTEST_VERSION: 7.4.3
  PYTEST_TESTINFRA_VERSION: 9.0.0

jobs:
  results:
    runs-on: ubuntu-20.04
    steps:
      - run: exit 0

  # molecule:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       runner:
  #         - name: ubuntu-22.04
  #           arch: x86
  #       platform:
  #         - name: debian12-systemd
  #           context: github.com/mateusz-uminski/dockerfiles#debian12-systemd-v0.1.0:debian12-systemd
  #         - name: alma9-systemd
  #           context: github.com/mateusz-uminski/dockerfiles#alma9-systemd-v0.1.0:alma9-systemd
  #         - name: amazon2023-systemd
  #           context: github.com/mateusz-uminski/dockerfiles#amazon2023-systemd-v0.1.0:amazon2023-systemd
  #       role: []

  #   name: "${{ matrix.role.name }}: ${{ matrix.platform.name }}(${{ matrix.runner.arch }})"
  #   uses: mateusz-uminski/github-actions/.github/workflows/molecule-test.yaml@main
  #   with:
  #     runner: ${{ matrix.runner.name }}
  #     python_version: ${{ matrix.role.python_version || env.PYTHON_VERSION }}
  #     ansible_version: ${{ matrix.role.ansible_version || env.PYTHON_VERSION }}
  #     molecule_version: ${{ matrix.role.molecule_version || env.PYTHON_VERSION }}
  #     molecule_plugins_version: ${{ matrix.role.molecule_plugins_version || env.PYTHON_VERSION }}
  #     pytest_version: ${{ matrix.role.pytest_version || env.PYTHON_VERSION }}
  #     pytest_testinfra_version: ${{ matrix.role.pytest_testinfra_version || env.PYTHON_VERSION }}
  #     role_path: "${{ matrix.platform.name }}"
  #     dockerfile_source: ${{ matrix.platform.context }}
  #     docker_image_name: ${{ matrix.platform.name }}

  # results:
  #   runs-on: ubuntu-20.04
  #   if: ${{ always() && github.event.pull_request }}
  #   needs: molecule
  #   steps:
  #     - run: exit 1
  #       if: >-
  #         ${{
  #           contains(needs.*.result, 'failure')
  #           || contains(needs.*.result, 'cancelled')
  #         }}
